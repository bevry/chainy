// Generated by CoffeeScript 1.6.3
(function() {
  var Chainy, Task, TaskGroup, debug, _ref,
    __slice = [].slice;

  _ref = require('TaskGroup'), Task = _ref.Task, TaskGroup = _ref.TaskGroup;

  debug = function() {};

  Chainy = (function() {
    Chainy.prototype.data = null;

    Chainy.prototype.runner = null;

    function Chainy() {
      this.data = null;
      this.runner = TaskGroup.create().run().on('complete', function(err) {
        if (err) {
          return console.log('error:', err);
        }
      });
      this;
    }

    Chainy.prototype.fork = function() {
      var _;
      _ = Chainy.create();
      _.data = JSON.parse(JSON.stringify(this.data));
      return _;
    };

    Chainy.create = function() {
      return new Chainy();
    };

    Chainy.use = function(pluginAddMethod) {
      pluginAddMethod(this);
      return this;
    };

    Chainy.addPlugin = function(name, method) {
      this.prototype[name] = function() {
        var args, context, task;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        debug('running plugin:', name, this.data, this.runner.config.name);
        context = this;
        task = Task.create({
          name: name,
          args: args,
          method: method,
          context: context
        });
        this.runner.addTask(task);
        return this;
      };
      return this;
    };

    return Chainy;

  })();

  Chainy.addPlugin('set', function(data) {
    debug('executing plugin: set', this.data, this.runner.config.name);
    this.data = data;
    return this;
  });

  Chainy.addPlugin('replace', function(cb) {
    debug('executing plugin: replace', this.data, this.runner.config.name);
    this.data = cb != null ? cb.call(this, this.data) : void 0;
    return this;
  });

  Chainy.addPlugin('add', function(items) {
    var _ref1;
    debug('executing plugin: add', this.data, this.runner.config.name);
    if (this.data == null) {
      this.data = [];
    }
    (_ref1 = this.data).push.apply(_ref1, items);
    return this;
  });

  Chainy.addPlugin('flatten', function() {
    debug('executing plugin: flatten', this.data, this.runner.config.name);
    this.data = require('lodash.flatten')(this.data);
    return this;
  });

  Chainy.addPlugin('map', function(iterator, next) {
    var data, me, tasks;
    debug('executing plugin: map', this.data, this.runner.config.name);
    me = this;
    data = this.data;
    tasks = TaskGroup.create('map iterator group').once('complete', function(err, result) {
      debug('all map iterators finished');
      return next(err);
    });
    data.forEach(function(value, key) {
      var task;
      task = new Task({
        name: "map iterator for " + key,
        method: iterator,
        args: [value],
        next: function(err, result) {
          if (!err) {
            return data[key] = result;
          }
        }
      });
      return tasks.addTask(task);
    });
    tasks.run();
    return this;
  });

  Chainy.addPlugin('removeDuplicates', function(field) {
    var counts;
    debug('executing plugin: removeDuplicates', this.data, this.runner.config.name);
    counts = {};
    this.data = this.data.filter(function(item) {
      var id;
      id = item[field];
      counts[id] = counts[id] || 0;
      ++counts[id];
      return counts[id] === 1;
    });
    return this;
  });

  Chainy.addPlugin('hasField', function(field) {
    debug('executing plugin: hasField', this.data, this.runner.config.name);
    this.data = this.data.filter(function(item) {
      return item[field];
    });
    return this;
  });

  Chainy.addPlugin('pipe', function(destinationStream) {
    var PassThrough, data, sourceStream;
    debug('executing plugin: pipe', this.data, this.runner.config.name);
    PassThrough = require('stream').PassThrough;
    sourceStream = new PassThrough();
    sourceStream.pipe(destinationStream);
    data = this.data;
    if (typeof data !== 'string') {
      data = JSON.stringify(data);
    }
    sourceStream.end(data);
    return this;
  });

  Chainy.addPlugin('fn', function(cb) {
    debug('executing plugin: fn', this.data, this.runner.config.name);
    if (cb != null) {
      cb.call(this, this.data);
    }
    return this;
  });

  Chainy.addPlugin('count', function() {
    debug('executing plugin: count', this.data, this.runner.config.name);
    console.log(this.data.length);
    return this;
  });

  Chainy.addPlugin('log', function() {
    debug('executing plugin: log', this.data, this.runner.config.name);
    console.log(this.data);
    return this;
  });

  Chainy.addPlugin('request', function(method, next) {
    var feedr, me;
    debug('executing plugin: request', this.data, this.runner.config.name);
    me = this;
    feedr = require('feedr').create({
      cache: 'preferred'
    });
    this.fork().map(function(item, complete) {
      var url;
      url = method(item);
      return feedr.readFeed({
        url: url,
        parse: 'json'
      }, complete);
    }).fn(function(result) {
      me.data = result;
      return next();
    });
    return this;
  });

  Chainy.create().add(['bevry', 'browserstate', 'ideashare', 'interconnectapp', 'docpad']).request(function(org) {
    return "https://api.github.com/orgs/" + org + "/public_members";
  }).flatten().count().removeDuplicates('id').count().request(function(user) {
    return user.url;
  }).hasField('location').count().map(function(user, complete) {
    return Chainy.create().add([user]).request(function(user) {
      return "https://api.tiles.mapbox.com/v3/examples.map-zr0njcqy/geocode/" + user.location + ".json";
    }).map(function(geo) {
      var result;
      result = geo.results[0][0];
      if (result) {
        user.coordinates = [result.lon, result.lat];
      }
      return geo;
    }).fn(function() {
      return complete(null, user);
    });
  }).hasField('coordinates').count().map(function(user) {
    return {
      type: 'Feature',
      properties: {
        githubUsername: user.login
      },
      geometry: {
        type: 'Point',
        coordinates: user.coordinates
      }
    };
  }).replace(function(data) {
    return {
      type: 'FeatureCollection',
      features: data
    };
  }).log().replace(function(data) {
    return JSON.stringify(data, null, '\t');
  }).pipe(require('fs').createWriteStream('./out.geojson'));

}).call(this);
